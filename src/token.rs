use std::fmt::Display;

#[derive(Clone, PartialEq, Eq, Debug)]

pub enum Token {
    Eof,
    Integer(i64),
    Identifier(String),
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Bar,
    Amp,
    BarBar,
    AmpAmp,
    Caret,
    Tilde,
    PlusPlus,
    MinusMinus,
    MinusGreater,
    OpenParen,
    CloseParen,
    OpenBrace,
    CloseBrace,
    Semicolon,
    Equal,
    EqualEqual,
    Excl,
    ExclEqual,
    Less,
    Greater,
    LessEqual,
    GreaterEqual,
    LessLess,
    GreaterGreater,
    Fn,
    Return,
    Int,
    If,
    Else,
}

impl Display for Token {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Token::Eof => write!(f, "EOF"),
            Token::Integer(value) => write!(f, "{}", value),
            Token::Identifier(value) => write!(f, "{}", value),
            Token::Plus => write!(f, "+"),
            Token::Minus => write!(f, "-"),
            Token::Star => write!(f, "*"),
            Token::Slash => write!(f, "/"),
            Token::Percent => write!(f, "%"),
            Token::Bar => write!(f, "|"),
            Token::Amp => write!(f, "&"),
            Token::BarBar => write!(f, "||"),
            Token::AmpAmp => write!(f, "&&"),
            Token::Caret => write!(f, "^"),
            Token::Tilde => write!(f, "~"),
            Token::PlusPlus => write!(f, "++"),
            Token::MinusMinus => write!(f, "--"),
            Token::MinusGreater => write!(f, "->"),
            Token::OpenParen => write!(f, "("),
            Token::CloseParen => write!(f, ")"),
            Token::OpenBrace => write!(f, "{{"),
            Token::CloseBrace => write!(f, "}}"),
            Token::Semicolon => write!(f, ";"),
            Token::Equal => write!(f, "="),
            Token::Excl => write!(f, "!"),
            Token::EqualEqual => write!(f, "=="),
            Token::ExclEqual => write!(f, "!="),
            Token::Less => write!(f, "<"),
            Token::Greater => write!(f, ">"),
            Token::LessEqual => write!(f, "<="),
            Token::GreaterEqual => write!(f, ">="),
            Token::LessLess => write!(f, "<<"),
            Token::GreaterGreater => write!(f, ">>"),
            Token::Fn => write!(f, "fn"),
            Token::Return => write!(f, "return"),
            Token::Int => write!(f, "int"),
            Token::If => write!(f, "if"),
            Token::Else => write!(f, "else"),
        }
    }
}
